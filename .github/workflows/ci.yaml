## Used to create CI for github actions. 

# STEPS:- 
# 1. Define Stages 
# - buliding 
# - test 
# - deploy etc

# 2. Create Jobs:- each stages have one or more jobs 
# 3. Specify Script - scripts are used to run the jobs 
# 4. Use Docker image - useful for maintaining a consistent env
# 5. define artifacts 


name: CI Pipeline

on: push

jobs:
  project-testing:
    runs-on: ubuntu-latest
    env:
      CAPSTONEPROJECTMLPIPELINE: ${{ secrets.CAPSTONEPROJECTMLPIPELINE }}

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: install dependencies
        run: |
          pip install -r requirements.txt

      - name: run pipeline
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONEPROJECTMLPIPELINE }} #CAPSTONE_TEST same name as of githubs action -> secreat key 
        run: |
          dvc repro

      - name: Run model tests # if model passes this test then only further steps will execute.
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONEPROJECTMLPIPELINE }}
        run: |
          python -m unittest tests/test_model.py

      - name: Promote model to production # only execute after test pass 
        if: success()
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONEPROJECTMLPIPELINE }}
        run: python scripts/promote_model.py

      - name: Run Flask app tests
        if: success()
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONEPROJECTMLPIPELINE }}
        run: python -m unittest tests/test_flask_app.py
